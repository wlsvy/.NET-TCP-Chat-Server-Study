//======================================
//======       AutoGenerated       =====
//======================================

using Shared.Network;
using Shared.Util;
using System;

namespace Shared.Protocol
{
    internal static class CSPacketPacker
    {
        private static void WriteHeader(BinaryEncoder encoder, CSPacketProtocol protocol, int bodySize)
        {
            encoder.Write(in protocol);
            encoder.Write(in bodySize);
        }
        public static ArraySegment<byte> Pack_CS_Ping(long sequenceNumber)
        {
            var protocol = CSPacketProtocol.CS_Ping;
            
            int bodySize = 0;
            bodySize += sequenceNumber.SizeForWrite();
            
            int packetSize = CSPacketHeader.HEADER_SIZE + bodySize;
            
            var packetBuffer = new ArraySegment<byte>(new byte[packetSize]);
            using (var encoder = new BinaryEncoder(packetBuffer))
            {
                WriteHeader(encoder, protocol, bodySize);
                encoder.Write(in sequenceNumber);
            }
            return packetBuffer;
        }
        public static ArraySegment<byte> Pack_CS_Login(string id, string password)
        {
            var protocol = CSPacketProtocol.CS_Login;
            
            int bodySize = 0;
            bodySize += id.SizeForWrite();
            bodySize += password.SizeForWrite();
            
            int packetSize = CSPacketHeader.HEADER_SIZE + bodySize;
            
            var packetBuffer = new ArraySegment<byte>(new byte[packetSize]);
            using (var encoder = new BinaryEncoder(packetBuffer))
            {
                WriteHeader(encoder, protocol, bodySize);
                encoder.Write(in id);
                encoder.Write(in password);
            }
            return packetBuffer;
        }
        public static ArraySegment<byte> Pack_CS_CreateAccount(string id, string password)
        {
            var protocol = CSPacketProtocol.CS_CreateAccount;
            
            int bodySize = 0;
            bodySize += id.SizeForWrite();
            bodySize += password.SizeForWrite();
            
            int packetSize = CSPacketHeader.HEADER_SIZE + bodySize;
            
            var packetBuffer = new ArraySegment<byte>(new byte[packetSize]);
            using (var encoder = new BinaryEncoder(packetBuffer))
            {
                WriteHeader(encoder, protocol, bodySize);
                encoder.Write(in id);
                encoder.Write(in password);
            }
            return packetBuffer;
        }
        public static ArraySegment<byte> Pack_CS_ChatMessage(string message)
        {
            var protocol = CSPacketProtocol.CS_ChatMessage;
            
            int bodySize = 0;
            bodySize += message.SizeForWrite();
            
            int packetSize = CSPacketHeader.HEADER_SIZE + bodySize;
            
            var packetBuffer = new ArraySegment<byte>(new byte[packetSize]);
            using (var encoder = new BinaryEncoder(packetBuffer))
            {
                WriteHeader(encoder, protocol, bodySize);
                encoder.Write(in message);
            }
            return packetBuffer;
        }
    }
}
